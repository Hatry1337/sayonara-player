cmake_minimum_required(VERSION 3.7)
project(sayonara)

include(FindPkgConfig)
include(compiler.cmake)

# absolute linker paths are no longer supoorted in -l parameter
# use -L for path and -l for library itself
if(POLICY CMP0003)
	cmake_policy(SET CMP0003 NEW)
endif()

# no more escaping of preprocessor definitions
if(POLICY CMP0005)
	cmake_policy(SET CMP0005 NEW)
endif()

# Run Automoc/Autouic over autogenerated source files (e.g. from qrc files)
if(POLICY CMP0071)
	cmake_policy(SET CMP0071 NEW)
endif()


if(WIN32)
	pkg_check_modules(GIO gio-windows-2.0 REQUIRED)
endif()

pkg_check_modules(TAGLIB taglib>=1.6 REQUIRED)
pkg_check_modules(GLIB glib-2.0 REQUIRED)
pkg_check_modules(GOBJECT gobject-2.0 REQUIRED)
pkg_check_modules(GSTREAMER gstreamer-1.0 REQUIRED)
pkg_check_modules(GSTREAMER_BASE gstreamer-base-1.0 REQUIRED)
pkg_check_modules(GSTREAMER_BASE_APP gstreamer-app-1.0 REQUIRED)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

if( NOT DEFINED CMAKE_BUILD_TYPE OR NOT CMAKE_BUILD_TYPE )
	message("Use standard build type \"Release\"")
	set(CMAKE_BUILD_TYPE "Release")
endif()

find_package(Qt5 COMPONENTS Core Widgets Sql Network DBus Xml REQUIRED)
find_package(Qt5LinguistTools REQUIRED)


include_directories(${Qt5Core_INCLUDE_DIRS})
include_directories(${Qt5Widgets_INCLUDE_DIRS})
include_directories(${Qt5Xml_INCLUDE_DIRS})
include_directories(${Qt5Sql_INCLUDE_DIRS})
include_directories(${Qt5DBus_INCLUDE_DIRS})
include_directories(${Qt5Network_INCLUDE_DIRS})
include_directories(${GSTREAMER_INCLUDE_DIRS})
include_directories(${GLIB_INCLUDE_DIRS})
include_directories(${GOBJECT_INCLUDE_DIRS})
include_directories(${GSTREAMER_INCLUDE_DIRS})
include_directories(${GSTREAMER_BASE_INCLUDE_DIRS})
include_directories(${TAGLIB_INCLUDE_DIRS})

include_directories(${CMAKE_SOURCE_DIR}/src)
include_directories(${CMAKE_BINARY_DIR}/src)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

add_definitions(${Qt5Core_DEFINITIONS})
add_definitions(${QT_DEFINITIONS})
add_definitions(-DLIB_INSTALL_DIR="${CMAKE_INSTALL_PREFIX}/lib/sayonara")
if(WIN32)
	message("Windows: host Will compile without dbus and shutdown support")

else()
	message("No Windows: Will compile with dbus and shutdown support")
	add_definitions(-DWITH_DBUS)
	add_definitions(-DWITH_SHUTDOWN)
	set(WIN32 0)
endif()

link_directories(${GSTREAMER_LIBRARY_DIRS})

if(WIN32)
	link_directories(${GIO_LIBRARY_DIRS})
elseif(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
	find_library(execinfo_LIB execinfo)
	if(NOT execinfo_LIB)
		message(FATAL_ERROR "FreeBSD requires execinfo library")
	endif()
	set(OS_LIBRARIES ${execinfo_LIB})
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(AUTOGEN_TARGETS_FOLDER ${CMAKE_CURRENT_BINARY_DIR})
set(AUTOGEN_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/autogenerated-files)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

include(CheckIncludeFileCXX)
check_include_file_cxx("cxxabi.h" HAVE_CXX_ABI)
if(${HAVE_CXX_ABI})
	add_definitions("-DHAVE_CXX_ABI")
	message("Compile with demangle")
else()
	message("Demangle not found")
endif()

add_subdirectory(Application)
add_subdirectory(Gui)
add_subdirectory(Utils)
add_subdirectory(Database)
add_subdirectory(Interfaces)
add_subdirectory(Components)
add_subdirectory(Languages)
add_subdirectory(3rdParty)

add_executable(${PROJECT_NAME} Main.cpp ${QM_FILES})

#file(GLOB_RECURSE HeaderFiles "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
#add_custom_target(headers SOURCES ${HeaderFiles})

if(WIN32)
	set(OS_LIBRARIES
		api-ms-win-core-winrt-l1-1-0
		api-ms-win-core-winrt-string-l1-1-0
		${GIO_LIBRARIES}
	)
endif()

target_link_libraries(${PROJECT_NAME}
	say_application
	gui_resources
	say_lang
	${OS_LIBRARIES}
)

add_executable("create_db" CreateDB.cpp)
target_link_libraries("create_db"
	sayonara_utils
	say_db
	Qt5::Widgets
)


if(WIN32)
	install(TARGETS ${PROJECT_NAME} DESTINATION .)
else()
	install(TARGETS ${PROJECT_NAME} DESTINATION bin)
endif()


